import { Button, Form, Input, InputNumber, message } from 'antd';
import React, { useEffect } from 'react';
import type { NextPage } from "next";
import { unstable_getServerSession } from "next-auth";
import Head from "next/head";
import { authOptions } from "../../api/auth/[...nextauth]";
import { LayoutAdmin } from '../../../components/layout';
import { items } from './menuItens';
import { useSession } from 'next-auth/react';
import axios from 'axios';
import { useRouter } from 'next/router';

const PlatformCreate: NextPage = (props) => {
    const [messageApi, contextHolder] = message.useMessage();
    const router = useRouter();
    const session = useSession()
    const createConnection = (values: any) => {
        console.log("üöÄ ~ file: create.tsx:12 ~ createConnection ~ values", values, session.data?.token.accessToken)
        axios.post(`/api/platforms`, values, {
            headers: {
                Authorization: `Bearer ${session.data?.token.accessToken}`
            }
        }).then((response: any) => {
            if(response.status >= 200 && response.status < 300) {
                messageApi.success('Plataforma cadastrada!');
                setTimeout(() => {
                    router.push('/panel/platforms');
                }
                , 1000)
            }
        }
        ).catch((error: any) => {
            messageApi.error(error?.response?.data.message || 'Erro ao cadastrar plataforma!');
        })
    }
    return <>
        <Head>
            <title>Listar plataformas</title>
            <meta
                name="description"
                content="Generated by create next app"
            />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <LayoutAdmin menuItems={items}>
        {contextHolder}
            <Form
                labelCol={{ span: 4 }}
                wrapperCol={{ span: 20 }}
                // {...formItemLayout}
                // layout={formLayout}
                // form={form}
                // initialValues={{ layout: formLayout }}
                onFinish={createConnection}
            >
                <Form.Item 
                    rules={[{ required: true, message: 'Por favor insira o nome da aplica√ß√£o!' }]}
                    label="Nome da aplica√ß√£o" name="name">
                    <Input placeholder="Nome da aplica√ß√£o" />
                </Form.Item>
                <Form.Item 
                    rules={[{ required: true, message: 'Por favor insira o ip!' }]}
                    label="IP do servidor" name="ip">
                    <Input placeholder="ip do servidor" />
                </Form.Item>
                <Form.Item 
                    rules={[{ required: true, message: 'Por favor insira a porta!' }]}
                    label="Porta da aplica√ß√£o" name="port">
                    <InputNumber placeholder="Porta da aplica√ß√£o" />
                </Form.Item>
                <Form.Item 
                    rules={[{ required: true, message: 'Por favor insira o username!' }]}
                    label="Usu√°rio" name="username">
                    <Input placeholder="Username" />
                </Form.Item>
                <Form.Item 
                    rules={[{ required: true, message: 'Por favor insira a senha!' }]}
                    label="Password" name="password">
                    <Input placeholder="Senha" />
                </Form.Item>
                <Form.Item >
                    <Button type="primary" htmlType='submit'>Criar conex√£o</Button>
                </Form.Item>
            </Form>
        </LayoutAdmin>
    </>
};

export async function getServerSideProps(context: { req: any; res: any; }) {
    const { req, res } = context;
    const session = await unstable_getServerSession(req, res, authOptions);
    if (!session) {
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }
    return {
        props: {
        },
    }
}

export default PlatformCreate;
